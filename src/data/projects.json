[
  {
    "id": "hellofit",
    "name": "HELLOFIT",
    "description": "지도 기반 주변 인기 스포츠 시설을 간편하게 탐색하는 웹 서비스",
    "image": "/images/projects/hellofit.png",
    "techStack": [
      "React",
      "Next.js",
      "TypeScript",
      "Recoil",
      "React Query",
      "Axios",
      "SCSS",
      "ESlint",
      "Prettier"
    ],
    "deployLink": "https://www.hellofit.site/",
    "githubLink": "https://github.com/eqypo9/HelloFit_Front",
    "team": true,
    "teamSize": 4,
    "teamMembers": {
      "Frontend": 2,
      "Backend": 1,
      "Designer": 1
    },
    "overview": {
      "title": "HELLOFIT 프로젝트 개요",
      "content": [
        "HELLOFIT은 공공데이터를 활용하여 스포츠 이용권이 적용되는 시설을 탐색하는 서비스입니다.",
        "기존 스포츠 강좌 예약 시스템에서는 시설의 위치와 정보를 개별적으로 확인해야 하는 번거로움이 있었습니다.",
        "HELLOFIT은 지도 기반 탐색, 인기 시설 추천, 후기 시스템을 도입하여 사용자 경험을 개선하는 것을 목표로 합니다."
      ]
    },
    "featuresDetail": [
      {
        "title": "지도 기반 스포츠 시설 탐색",
        "description": "사용자의 현재 위치를 기반으로 가까운 스포츠 시설을 지도에서 탐색할 수 있도록 지원.",
        "image": "/images/projects/hellofit/overview_1.png"
      },
      {
        "title": "이용권 유형별 맞춤 정보 제공",
        "description": "일반 이용권과 장애인 이용권을 구분하여 맞춤형 정보를 제공.",
        "image": "/images/projects/hellofit/overview_2.png"
      },
      {
        "title": "누적 수강생 수 기반 인기 스포츠 종목 추천",
        "description": "누적 수강생 데이터를 기반으로 인기 있는 스포츠 종목을 분석하고 필터링 기능 제공.",
        "image": "/images/projects/hellofit/overview_4.png"
      },
      {
        "title": "지역별 인기 시설 추천",
        "description": "누적 수강생 수를 기반으로 인기 시설을 추천하여 사용자 맞춤 탐색 기능 강화.",
        "image": "/images/projects/hellofit/overview_5.png"
      },
      {
        "title": "시설 후기 및 별점 시스템",
        "description": "시설 이용자의 후기를 등록하고 별점을 평가할 수 있는 기능 제공.",
        "image": "/images/projects/hellofit/overview_6.png"
      },
      {
        "title": "관심 시설 저장 및 알림 기능",
        "description": "관심 시설 저장 및 신규 강좌 개설 알림 기능 제공.",
        "image": "/images/projects/hellofit/overview_7.png"
      }
    ],
    "development": {
      "title": "개발 과정",
      "sections": [
        {
          "title": "핵심 기여",
          "content": [
            "공공데이터 API를 활용하여 스포츠 시설 데이터를 동적으로 로드하는 기능 구현",
            "NextAuth를 활용한 소셜 로그인 (Google, Kakao) 도입",
            "사용자 경험을 고려한 UI/UX 개선: 지도 기반 탐색 최적화 및 필터링 기능 강화",
            "카카오 지도 API와 Recoil을 결합하여 상태 관리를 최적화하여 성능 개선"
          ]
        },
        {
          "title": "카카오 지도 API 성능 최적화",
          "content": [
            "카카오 지도 API의 불필요한 중복 실행을 방지하기 위해 useKakaoMapLoader 훅을 도입",
            "지도 초기화 과정에서 useEffect를 활용하여 API 스크립트 로드와 상태 관리를 최적화",
            "역지오코딩을 적용하여 사용자의 현재 위치를 기반으로 자동으로 지역명을 설정"
          ],
          "code": {
            "description": "카카오 지도 API 스크립트를 로드하고, 사용자의 현재 위치를 반영하는 로직",
            "snippet": "const loadKakaoMapScript = () => { ... };"
          }
        },
        {
          "title": "마커 렌더링 최적화",
          "content": [
            "기존 방식에서는 시설 목록이 변경될 때마다 모든 마커를 삭제하고 다시 생성하여 성능 저하 발생",
            "useFacilityMarkers 훅을 활용하여 기존 마커를 유지하면서 필요한 경우만 업데이트",
            "좌표 변환을 병렬 처리하여 로딩 속도를 개선하고, UI 깜빡임 문제를 해결"
          ],
          "code": {
            "description": "좌표 변환을 병렬 처리하여 마커 렌더링 속도를 개선하는 코드",
            "snippet": "const coordinates = await Promise.all(facilities.map(facility => fetchCoordinates(facility)));"
          }
        },
        {
          "title": "검색 및 API 호출 최적화",
          "content": [
            "AbortController를 활용하여 검색 중 새로운 요청이 들어오면 기존 요청을 취소하여 불필요한 API 호출 방지",
            "useMemo와 debounce를 적용하여 연속적인 검색에도 성능 저하가 발생하지 않도록 개선",
            "검색 결과가 없을 경우 사용자에게 명확한 피드백을 제공하여 UX 개선"
          ],
          "code": {
            "description": "AbortController를 활용하여 불필요한 API 요청을 방지하는 코드",
            "snippet": "if (abortControllerRef.current) { abortControllerRef.current.abort(); }"
          }
        },
        {
          "title": "UI/UX 개선",
          "content": [
            "이용권 유형별 필터 제공 (일반/장애인)으로 사용자 맞춤 탐색 기능 강화",
            "반응형 디자인을 적용하여 모바일 환경에서도 원활한 탐색 가능",
            "UX 테스트를 통해 검색 및 필터링 로직을 개선하여 사용자의 피드백을 반영"
          ],
          "code": {
            "description": "이용권 유형별 필터 기능을 구현한 코드",
            "snippet": "const filteredFacilities = facilities.filter(facility => facility.type === selectedType);"
          }
        }
      ]
    },
    "troubleshooting": {
      "title": "트러블슈팅",
      "issues": [
        {
          "title": "마커 플리커 현상 & 과도한 API 호출 문제",
          "problem": "시설 목록이 변경될 때마다 기존 마커를 삭제하고 새로 생성하여 UI가 깜빡이며, 과도한 API 요청이 발생하여 성능이 저하됨.",
          "solution": [
            "useFacilityMarkers 훅을 도입하여 기존 마커를 유지하며 필요한 경우만 업데이트.",
            "AbortController를 활용하여 불필요한 API 요청을 방지.",
            "좌표 변환(fetchCoordinates)을 병렬 처리하여 렌더링 속도 개선."
          ],
          "code": {
            "description": "좌표 변환을 병렬 처리하여 렌더링 속도를 개선",
            "snippet": "const coordinates = await Promise.all(facilities.map(facility => fetchCoordinates(facility)));"
          }
        },
        {
          "title": "현재 위치 탐색 시 불필요한 API 호출 문제",
          "problem": "사용자가 현재 위치 버튼을 여러 번 클릭하면 같은 API 요청이 반복 호출되면서 성능이 저하됨.",
          "solution": [
            "usePositionButton 훅을 활용하여 사용자의 위치를 캐싱하고, 한 번 가져온 위치를 재사용하도록 개선.",
            "위치 허용 여부를 확인하여 허용하지 않을 경우 기본 위치를 설정."
          ],
          "code": {
            "description": "사용자의 위치를 캐싱하여 불필요한 호출 방지",
            "snippet": "const [cachedLocation, setCachedLocation] = useState(null);\nconst moveToUserLocation = () => {\n  if (cachedLocation) { map.setCenter(cachedLocation); return; }\n  navigator.geolocation.getCurrentPosition(position => {\n    const userLatLng = new kakao.maps.LatLng(position.coords.latitude, position.coords.longitude);\n    setCachedLocation(userLatLng);\n    map.setCenter(userLatLng);\n  });\n};"
          }
        },
        {
          "title": "지도 이동 시 마커 초기화 문제",
          "problem": "지도를 이동할 때 기존 마커가 유지되지 않고 다시 그려지는 문제 발생.",
          "solution": [
            "useFacilityMarkers 훅에서 기존 마커를 재사용할 수 있도록 개선.",
            "setCenter 호출 시 기존 마커가 유지되도록 수정.",
            "useEffect 의존성을 최소화하여 불필요한 리렌더링 방지."
          ]
        },
        {
          "title": "지역 검색 시 정확하지 않은 검색 결과",
          "problem": "검색된 지역명이 너무 길거나 복잡하여 API가 정확한 좌표를 반환하지 않는 경우 발생.",
          "solution": [
            "simplifyRegionName 유틸 함수를 사용하여 시/군/구 단위로 변환.",
            "kakao.maps.services.Geocoder() 호출 시 검색 결과를 검증하여 첫 번째 결과만 사용."
          ]
        }
      ]
    }
  },
  {
    "id": "global-nomad",
    "name": "Global Nomad",
    "description": "여행 시 체험 상품을 간편하게 예약하는 서비스",
    "image": "/images/projects/global-nomad.png",
    "techStack": [
      "React",
      "Next.js",
      "TypeScript",
      "React Query",
      "Zustand",
      "Tailwind CSS",
      "React Query",
      "ESlint",
      "Prettier"
    ],
    "deployLink": "https://nomad-ebon.vercel.app/",
    "githubLink": "https://github.com/eqypo9/global-nomad",
    "features": [
      "여행 체험 상품 예약 시스템",
      "지도 기반 위치 검색",
      "사용자 리뷰 시스템"
    ],
    "retrospective": "## 프로젝트 회고\n- **예약 시스템을 설계하며 백엔드 API와의 협업 중요성을 경험**\n- **React Query의 비동기 데이터 관리 최적화 기술 습득**",
    "troubleshooting": "## 트러블슈팅\n### 🚧 체험 상품 데이터가 업데이트되지 않음\n**🔍 문제:** React Query의 데이터가 자동으로 최신화되지 않음\n\n**✅ 해결:** React Query의 `refetchInterval`을 추가하여 최신 데이터 유지"
  },
  {
    "id": "the-julge",
    "name": "The Julge",
    "description": "알바 구직자와 사장님을 연결하는 서비스",
    "image": "/images/projects/the-julge.png",
    "techStack": [
      "React",
      "Next.js",
      "TypeScript",
      "Axios",
      "React Query",
      "Zustand",
      "Styled Components",
      "ESlint",
      "Prettier"
    ],
    "features": [
      "알바 구직자와 사장님 간 매칭 기능",
      "채팅 시스템을 활용한 실시간 커뮤니케이션",
      "구인 공고 및 지원 관리 기능"
    ],
    "deployLink": "https://the-julge.vercel.app/",
    "githubLink": "https://github.com/eqypo9/TheJulge"
  }
]
