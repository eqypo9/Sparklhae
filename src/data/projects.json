[
  {
    "id": "hellofit",
    "name": "HELLOFIT",
    "description": "공공데이터 API를 활용하여 스포츠 이용권이 적용되는 시설을 탐색하는 서비스",
    "image": "/images/projects/hellofit.png",
    "techStack": [
      "React",
      "Next.js",
      "TypeScript",
      "Recoil",
      "React Query",
      "Axios",
      "SCSS",
      "ESlint",
      "Prettier"
    ],
    "deployLink": "https://www.hellofit.site/",
    "githubLink": "https://github.com/eqypo9/HelloFit_Front",
    "features": [
      "공공데이터 API 연동을 통한 스포츠 시설 탐색",
      "이용권 필터링 및 검색 기능",
      "NextAuth를 이용한 소셜 로그인 (Google, Kakao)",
      "지도에서 현재 위치 탐색 및 시설 검색 기능",
      "카카오 지도 API를 활용한 마커 렌더링 최적화"
    ],
    "overview": {
      "title": "HELLOFIT 프로젝트 개요",
      "content": [
        "HELLOFIT은 공공데이터 API를 활용하여 스포츠 이용권이 적용되는 시설을 탐색하는 서비스입니다.",
        "기존 스포츠 강좌 예약 시스템에서는 시설의 위치와 정보를 개별적으로 확인해야 하는 번거로움이 있었습니다.",
        "HELLOFIT은 지도 기반 탐색, 인기 시설 추천, 후기 시스템을 도입하여 사용자 경험을 개선하는 것을 목표로 합니다."
      ]
    },
    "featuresDetail": [
      {
        "title": "지도 기반 스포츠 시설 탐색",
        "description": "사용자의 현재 위치를 기반으로 가까운 스포츠 시설을 지도에서 탐색할 수 있도록 지원."
      },
      {
        "title": "이용권 유형별 맞춤 정보 제공",
        "description": "일반 이용권과 장애인 이용권을 구분하여 맞춤형 정보를 제공."
      },
      {
        "title": "누적 수강생 수 기반 인기 스포츠 종목 추천",
        "description": "누적 수강생 데이터를 기반으로 인기 있는 스포츠 종목을 분석하고 필터링 기능 제공."
      },
      {
        "title": "지역별 인기 시설 추천",
        "description": "누적 수강생 수를 기반으로 인기 시설을 추천하여 사용자 맞춤 탐색 기능 강화."
      },
      {
        "title": "시설 후기 및 별점 시스템",
        "description": "시설 이용자의 후기를 등록하고 별점을 평가할 수 있는 기능 제공."
      },
      {
        "title": "관심 시설 저장 및 알림 기능",
        "description": "관심 시설 저장 및 신규 강좌 개설 알림 기능 제공."
      }
    ],
    "development": {
      "title": "개발 과정",
      "sections": [
        {
          "title": "핵심 기여",
          "content": [
            "공공데이터 API를 활용하여 스포츠 시설 데이터를 동적으로 로드하는 기능 구현",
            "NextAuth를 활용한 소셜 로그인 (Google, Kakao) 도입",
            "사용자 경험을 고려한 UI/UX 개선: 지도 기반 탐색 최적화 및 필터링 기능 강화",
            "카카오 지도 API와 Recoil을 결합하여 상태 관리를 최적화하여 성능 개선"
          ]
        },
        {
          "title": "성능 최적화",
          "content": [
            "Kakao Maps API 초기화 최적화: useEffect 내부에서 직접 로드하는 방식에서 useKakaoMapLoader 훅으로 개선하여 중복 실행 방지",
            "마커 렌더링 최적화: 기존에는 시설 목록 변경 시 모든 마커를 삭제하고 새로 생성하는 방식 → useFacilityMarkers 훅을 도입하여 기존 마커를 유지하면서 필요한 경우만 업데이트",
            "검색 및 API 호출 최적화: useMemo와 debounce를 적용하여 불필요한 API 호출을 줄이고, 연속적인 검색에도 성능 저하가 없도록 개선"
          ]
        },
        {
          "title": "UI/UX 개선",
          "content": [
            "필터링 기능 강화: 이용권 유형별 (일반/장애인) 필터 제공하여 사용자 맞춤 탐색 가능",
            "반응형 디자인 적용: 모바일에서도 원활한 사용이 가능하도록 Tailwind CSS 기반의 UI 최적화",
            "사용자 피드백 반영: UX 테스트를 진행하여 불편했던 검색 및 필터링 로직을 개선"
          ]
        }
      ]
    },
    "troubleshooting": {
      "title": "트러블슈팅",
      "issues": [
        {
          "title": "Kakao Maps API 중복 로드 문제",
          "problem": "개발 모드(Strict Mode)에서 useEffect가 두 번 실행되면서 Kakao Maps API가 중복 로드되는 문제 발생.",
          "solution": [
            "useKakaoMapLoader 훅을 도입하여 API 로드를 한 번만 수행하도록 변경.",
            "useRef를 활용하여 API가 이미 로드된 경우 다시 실행되지 않도록 처리."
          ]
        },
        {
          "title": "마커 깜빡임 현상(Flickering) 해결",
          "problem": "시설 목록이 변경될 때마다 기존 마커를 삭제하고 다시 생성하면서 UI가 깜빡이는 현상 발생.",
          "solution": [
            "useFacilityMarkers 훅을 도입하여 기존 마커가 있는 경우 새로운 마커만 업데이트하는 방식으로 개선.",
            "AbortController를 활용하여 불필요한 API 요청을 줄임."
          ]
        },
        {
          "title": "현재 위치 탐색 시 불필요한 API 호출 문제",
          "problem": "navigator.geolocation.getCurrentPosition을 호출할 때마다 API 요청이 발생하여 성능 저하가 발생.",
          "solution": [
            "usePositionButton 훅을 활용하여 사용자의 현재 위치를 캐싱하고, 한 번 가져온 위치를 재사용하도록 변경.",
            "사용자의 위치 허용 여부에 따라 기본 위치를 설정하여 UX 개선."
          ]
        }
      ]
    }
  },
  {
    "id": "global-nomad",
    "name": "Global Nomad",
    "description": "여행 시 체험 상품을 간편하게 예약하는 서비스",
    "image": "/images/projects/global-nomad.png",
    "techStack": [
      "React",
      "Next.js",
      "TypeScript",
      "React Query",
      "Zustand",
      "Tailwind CSS",
      "React Query",
      "ESlint",
      "Prettier"
    ],
    "deployLink": "https://nomad-ebon.vercel.app/",
    "githubLink": "https://github.com/eqypo9/global-nomad",
    "features": [
      "여행 체험 상품 예약 시스템",
      "지도 기반 위치 검색",
      "사용자 리뷰 시스템"
    ],
    "retrospective": "## 프로젝트 회고\n- **예약 시스템을 설계하며 백엔드 API와의 협업 중요성을 경험**\n- **React Query의 비동기 데이터 관리 최적화 기술 습득**",
    "troubleshooting": "## 트러블슈팅\n### 🚧 체험 상품 데이터가 업데이트되지 않음\n**🔍 문제:** React Query의 데이터가 자동으로 최신화되지 않음\n\n**✅ 해결:** React Query의 `refetchInterval`을 추가하여 최신 데이터 유지"
  },
  {
    "id": "the-julge",
    "name": "The Julge",
    "description": "알바 구직자와 사장님을 연결하는 서비스",
    "image": "/images/projects/the-julge.png",
    "techStack": [
      "React",
      "Next.js",
      "TypeScript",
      "Axios",
      "React Query",
      "Zustand",
      "Styled Components",
      "ESlint",
      "Prettier"
    ],
    "features": [
      "알바 구직자와 사장님 간 매칭 기능",
      "채팅 시스템을 활용한 실시간 커뮤니케이션",
      "구인 공고 및 지원 관리 기능"
    ],
    "deployLink": "https://the-julge.vercel.app/",
    "githubLink": "https://github.com/eqypo9/TheJulge"
  }
]
